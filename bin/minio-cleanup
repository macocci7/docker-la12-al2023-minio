#!/bin/bash
# @description clears whole MinIO data.
# @description super user priviledges required.
# @usage minio-cleanup
# @example minio-cleanup

SCRIPT_DIR=$(cd $(dirname $0) && pwd)
INCLUDE_DIR=$(cd ${SCRIPT_DIR}/../include && pwd)
DATA_DIR=$(cd ${SCRIPT_DIR}/../docker/minio/data && pwd)
BUCKET="laravel"

# imports external scripts
. ${INCLUDE_DIR}/colorizable
. ${INCLUDE_DIR}/runnable

clean_up_dir () {
    if [ ! -d $1 ]; then
        print_bg_red "Directory [${1}] not found."
        print_bg_red "Operation aborted."
        exit 1
    fi
    if [ ! -x $1 ]; then
        print_bg_red "No permission to enter [${1}]."
        print_bg_red "Operation aborted."
        exit 1
    fi
    cd $1
    for ENTRY in `ls -a -I '.' -I '..' -I '.gitignore'`; do
        sudo rm -rf $ENTRY
    done
}

# Confirmation
print_yellow "This script is going to clear all data in [${DATA_DIR}]."
CAN_CLEAN_UP=""
while [[ ! $CAN_CLEAN_UP =~ ^[ny]$ ]]; do
    echo -n "Are you sure you want to delete whole data? [y/n]:"
    read CAN_CLEAN_UP
done
if [ $CAN_CLEAN_UP = "n" ]; then
    print_bg_red "Operation aborted."
    exit 1
fi

# Checks data directory existence
if [ ! -d $DATA_DIR ]; then
    print_bg_red "Directory [${DATA_DIR}] not found."
    print_bg_red "Operation aborted."
    exit 1
fi

# Checks the data directory
ENTRIES=`ls -a -I '.' -I '..' -I '.gitignore' ${DATA_DIR}`
if [ -z "${ENTRIES}" ]; then
    print_green "Directory [${DATA_DIR}] is empty."
    exit;
else
    print_yellow "Directory [${DATA_DIR}] is not empty."
    echo "Cleaning up [${DATA_DIR}]..."
    run_command clean_up_dir $DATA_DIR
fi

# Creates a bucket directory
run_command mkdir ${DATA_DIR}/${BUCKET}

print_green "Completed!"
